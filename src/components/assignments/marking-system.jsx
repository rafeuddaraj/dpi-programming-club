"use client"

import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Switch } from "@/components/ui/switch"
import { Save } from "lucide-react"
import { useState } from "react"
import FeedbackPreview from "../common/feedback-preview"

export default function MarkingSystem({ totalMark = 100 }) {
    // Requirements data with toggle state
    const [requirements, setRequirements] = useState([
        {
            id: 1,
            text: "‡¶π‡ßã‡¶Æ ‡¶™‡ßá‡¶ú‡ßá ‡¶Ö‡¶∞‡ßç‡¶•‡¶æ‡ßé index.html ‡¶™‡ßá‡¶ú‡ßá‡¶∞ ‡¶™‡ßç‡¶∞‡ßã‡¶™‡¶æ‡¶∞‡ßç‡¶ü‡¶ø‡¶∞ ‡¶ï‡¶æ‡¶∞‡ßç‡¶° ‡¶•‡¶æ‡¶ï‡¶¨‡ßá, ‡¶°‡ßá‡¶ü‡¶æ‡¶¨‡ßá‡¶ú ‡¶•‡ßá‡¶ï‡ßá ‡¶®‡¶ø‡¶Ø‡¶º‡ßá ‡¶è‡¶∏‡ßá ‡¶¶‡ßá‡¶ñ‡¶æ‡¶§‡ßá ‡¶π‡¶¨‡ßá, ‡¶è‡¶á ‡¶™‡ßá‡¶ú ‡¶∏‡¶æ‡¶á‡¶ü‡¶∞ ‡¶∏‡¶æ‡¶á‡¶° ‡¶è ‡¶∞‡ßá‡¶®‡ßç‡¶°‡¶æ‡¶∞ ‡¶π‡¶Ø‡¶º‡ßá ‡¶Ü‡¶∏‡¶¨‡ßá ‡•§",
            isCompleted: true,
        },
        {
            id: 2,
            text: "‡¶π‡ßã‡¶Æ ‡¶™‡ßá‡¶ú‡ßá ‡¶è‡¶ï ‡¶∏‡¶æ‡¶•‡ßá ‡¶∏‡¶∞‡ßç‡¶¨‡ßã‡¶ö‡ßç‡¶ö ‡ßÆ ‡¶ü‡¶ø ‡¶ï‡¶æ‡¶∞‡ßç‡¶° ‡¶≤‡ßã‡¶° ‡¶π‡¶¨‡ßá, ‡¶°‡ßá‡¶ü‡¶æ‡¶¨‡ßá‡¶ú‡ßá ‡ßÆ ‡¶è‡¶∞ ‡¶¨‡ßá‡¶∂‡¶ø ‡¶™‡ßç‡¶∞‡ßã‡¶™‡¶æ‡¶∞‡ßç‡¶ü‡¶ø ‡¶•‡¶æ‡¶ï‡¶≤‡ßá ‡¶™‡ßá‡¶ú‡¶ø‡¶®‡ßá‡¶∂‡¶® ‡¶ï‡¶∞‡ßá ‡¶¶‡ßá‡¶ñ‡¶æ‡¶¨‡ßá ‡•§",
            isCompleted: false,
        },
        {
            id: 3,
            text: "‡¶π‡ßã‡¶Æ ‡¶™‡ßá‡¶ú‡ßá‡¶∞ ‡¶™‡ßç‡¶∞‡ßã‡¶™‡¶æ‡¶∞‡ßç‡¶ü‡¶ø‡¶∞ ‡¶ï‡¶æ‡¶∞‡ßç‡¶°‡ßá ‡¶è ‡¶™‡ßç‡¶∞‡ßã‡¶™‡¶æ‡¶∞‡ßç‡¶ü‡¶ø‡¶∞ ‡¶®‡¶æ‡¶Æ, ‡¶†‡¶ø‡¶ï‡¶æ‡¶®‡¶æ, ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶∞‡¶æ‡¶§‡ßá ‡¶ñ‡¶∞‡¶ö, ‡¶ï‡¶§ ‡¶•‡ßá‡¶ï‡ßá ‡¶ï‡¶Æ ‡¶ü‡¶æ‡¶ï‡¶æ ‡¶Ü‡¶õ‡ßá, ‡¶™‡ßç‡¶∞‡ßã‡¶™‡¶æ‡¶∞‡ßç‡¶ü‡¶ø‡¶∞ ‡¶õ‡¶¨‡¶ø, ‡¶è‡¶¨‡¶Ç ‡¶è‡¶≠‡¶æ‡¶∞‡ßá‡¶ú ‡¶∞‡ßá‡¶ü‡¶ø‡¶Ç ‡¶¶‡ßá‡¶ñ‡¶æ‡¶§‡ßá ‡¶π‡¶¨‡ßá ‡•§",
            isCompleted: true,
        },
        {
            id: 4,
            text: "‡¶™‡ßç‡¶∞‡ßã‡¶™‡¶æ‡¶∞‡ßç‡¶ü‡¶ø ‡¶ï‡¶æ‡¶∞‡ßç‡¶°‡ßá ‡¶ï‡ßç‡¶≤‡¶ø‡¶ï ‡¶ï‡¶∞‡¶≤‡ßá, ‡¶∏‡ßá‡¶á ‡¶™‡ßç‡¶∞‡ßã‡¶™‡¶æ‡¶∞‡ßç‡¶ü‡¶ø‡¶∞ ‡¶°‡¶ø‡¶ü‡ßá‡¶á‡¶≤‡¶∏ ‡¶™‡ßá‡¶ú‡ßá ‡¶®‡¶ø‡¶Ø‡¶º‡ßá ‡¶Ø‡ßá‡¶§‡ßá ‡¶π‡¶¨‡ßá ‡•§",
            isCompleted: true,
        },
        {
            id: 5,
            text: "‡¶™‡ßç‡¶∞‡ßã‡¶™‡¶æ‡¶∞‡ßç‡¶ü‡¶ø‡¶∞ ‡¶°‡¶ø‡¶ü‡ßá‡¶á‡¶≤‡¶∏ ‡¶™‡ßá‡¶ú‡ßá ‡¶™‡ßç‡¶∞‡ßã‡¶™‡¶æ‡¶∞‡ßç‡¶ü‡¶ø‡¶∞ ‡¶®‡¶æ‡¶Æ, ‡¶™‡ßç‡¶∞‡ßã‡¶™‡¶æ‡¶∞‡ßç‡¶ü‡¶ø‡¶ü‡¶ø ‡¶ï‡ßá ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡ßá‡¶õ‡ßá, ‡¶è‡¶≠‡¶æ‡¶∞‡ßá‡¶ú ‡¶∞‡ßá‡¶ü‡¶ø‡¶Ç, ‡¶ï‡¶§‡¶ó‡ßÅ‡¶≤‡ßã ‡¶∞‡ßá‡¶ü‡¶ø‡¶Ç/‡¶∞‡¶ø‡¶≠‡¶ø‡¶â ‡¶∞‡¶Ø‡¶º‡ßá‡¶õ‡ßá ‡¶§‡¶æ‡¶∞ ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ, ‡¶™‡ßç‡¶∞‡ßã‡¶™‡¶æ‡¶∞‡ßç‡¶ü‡¶ø‡¶∞ ‡¶†‡¶ø‡¶ï‡¶æ‡¶®‡¶æ, ‡ß´ ‡¶ü‡¶ø ‡¶õ‡¶¨‡¶ø ‡¶∏‡¶π ‡¶Ø‡ßá‡¶® ‡¶ï‡¶ø‡¶õ‡ßÅ ‡¶§‡¶•‡ßç‡¶Ø ‡¶•‡¶æ‡¶ï‡ßá‡•§",
            isCompleted: true,
        },
    ])

    const totalMarksPerRequirement = totalMark / requirements.length


    const [marks, setMarks] = useState({
        mark: 0,
        crossMark: 0, // by requirement
        rightMark: 0, // by requirement
        avgMark: requirements?.reduce((acc, curr) => acc + (curr.isCompleted ? totalMarksPerRequirement : 0), 0) / requirements.length
    })

    const [isSubmitted, setIsSubmitted] = useState(false)
    const [comment, setComment] = useState("")

    // Toggle requirement completion status
    const toggleRequirement = (id) => {
        setRequirements(requirements.map((req) => {
            if (req?.id === id) {
                if (req.isCompleted) {
                    setMarks(prev => {
                        if (prev?.mark - totalMarksPerRequirement <= 0) return { ...prev, mark: 0 }
                        else {
                            return {
                                ...prev, mark: prev.mark + totalMarksPerRequirement
                            }
                        }
                    })
                } else {
                    setMarks({ ...marks, mark: marks.mark - totalMarksPerRequirement })

                }
                return { ...req, isCompleted: !req.isCompleted }
            }
            return req
        }))
    }

    const handleSubmit = () => {
        setIsSubmitted(true)
        // Here you would typically send the data to your backend
        alert("Marks submitted successfully!")
    }

    const generateMarkdown = () => {
        return requirements.map((item, index) => {
            // Ensuring no breaks or additional characters inside the table columns
            return `| ${index + 1}Ô∏è‚É£ | ${item.text} | ${item.isCompleted ? '‚úÖ ‡¶∏‡¶†‡¶ø‡¶ï' : '‚ùå ‡¶Ö‡¶®‡ßÅ‡¶™‡¶∏‡ßç‡¶•‡¶ø‡¶§'} |`;
        }).join('\n');
    }

    const markdownText = `# üìù ‡¶è‡¶∏‡¶æ‡¶á‡¶®‡¶Æ‡ßá‡¶®‡ßç‡¶ü‡ßá‡¶∞ ‡¶∞‡¶ø‡¶ï‡ßã‡¶Ø‡¶º‡¶æ‡¶∞‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶Ö‡¶®‡ßÅ‡¶Ø‡¶æ‡¶Ø‡¶º‡ßÄ ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶∏‡¶æ‡¶¨‡¶Æ‡¶ø‡¶∂‡¶®‡ßá‡¶∞ ‡¶´‡¶≤‡¶æ‡¶´‡¶≤  

## ‚úÖ ‡¶®‡¶ø‡¶∞‡ßÄ‡¶ï‡ßç‡¶∑‡¶£ | ‡¶ï‡¶ø ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá  

| üî¢ ‡¶ï‡ßç‡¶∞‡¶Æ | üìå ‡¶ï‡¶æ‡¶ú‡ßá‡¶∞ ‡¶¨‡¶ø‡¶¨‡¶∞‡¶£ | üìä ‡¶∏‡ßç‡¶ü‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶∏ |
|------|----------------------|----------|
${generateMarkdown()}
---

## üíª ‡¶ï‡ßã‡¶° ‡¶ï‡ßã‡¶Ø‡¶º‡¶æ‡¶≤‡¶ø‡¶ü‡¶ø ‡¶è‡¶¨‡¶Ç ‡¶∞‡¶ø‡¶≠‡¶ø‡¶â‡¶¨‡¶ø‡¶≤‡¶ø‡¶ü‡¶ø  
---

## üõ†Ô∏è ‡¶∏‡¶Æ‡¶æ‡¶ß‡¶æ‡¶®‡¶Ø‡ßã‡¶ó‡ßç‡¶Ø ‡¶Æ‡¶§‡¶æ‡¶Æ‡¶§  
`;

    return (
        <div className="min-h-screen ">
            <div className="flex flex-col md:flex-row">
                {/* Left Sidebar - Requirements with Toggle */}
                <div className="w-full md:w-1/3 p-4 border-r border-gray-800">
                    <h2 className="text-xl font-bold mb-4">‡¶∞‡¶ø‡¶ï‡ßã‡¶Ø‡¶º‡¶æ‡¶∞‡¶Æ‡ßá‡¶®‡ßç‡¶ü</h2>
                    <div className="space-y-6">
                        {requirements.map((req) => (
                            <div key={req.id} className="border border-gray-700 rounded-md p-4">
                                <div className="flex items-center justify-between mb-3">
                                    <span className="font-medium">Requirement {req.id}</span>
                                    <Switch
                                        checked={req.isCompleted}
                                        onCheckedChange={() => toggleRequirement(req.id)}
                                        className={req.isCompleted ? "bg-green-600" : "bg-red-600"}
                                    />
                                </div>
                                <p className="text-sm text-gray-300">{req.text}</p>
                            </div>
                        ))}
                    </div>
                </div>

                {/* Middle - Requirements Preview */}
                <div className="w-full md:w-1/3 p-4 border-r border-gray-800">
                    <h2 className="text-xl font-bold mb-4">‡¶è‡¶∏‡¶æ‡¶á‡¶®‡¶Æ‡ßá‡¶®‡ßç‡¶ü‡ßá‡¶∞ ‡¶∞‡¶ø‡¶ï‡ßÅ‡¶Ø‡¶º‡¶æ‡¶∞‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶Ö‡¶®‡ßÅ‡¶Ø‡¶æ‡¶Ø‡¶º‡ßÄ ‡¶´‡¶≤‡¶æ‡¶´‡¶≤</h2>

                    <FeedbackPreview markdownText={markdownText} />
                </div>

                {/* Right Sidebar - Marks and Metadata */}
                <div className="w-full md:w-1/3 p-4">
                    <h2 className="text-xl font-bold mb-4">Mark</h2>

                    <div className="space-y-6">
                        <div className="border border-gray-700 rounded-md p-4">
                            <h3 className="text-lg mb-3">Marking</h3>

                            <div className="grid grid-cols-2 gap-4 mb-4">
                                <div>
                                    <label className="block text-sm text-gray-400 mb-1">Requirement</label>
                                    <Input
                                        type="number"
                                        value={marks.mark}
                                        onChange={(e) => setMarks({ ...marks, mark: Number(e.target.value) })}
                                        className="bg-gray-800 border-gray-700"
                                    />
                                </div>
                                <div>
                                    <label className="block text-sm text-gray-400 mb-1">Right Mark</label>
                                    <Input
                                        type="number"
                                        value={marks.rightMark}
                                        onChange={(e) => setMarks({ ...marks, rightMark: Number(e.target.value) })}
                                        className="bg-gray-800 border-gray-700"
                                    />
                                </div>
                                <div>
                                    <label className="block text-sm text-gray-400 mb-1">Cross Mark</label>
                                    <Input
                                        type="number"
                                        value={marks.crossMark}
                                        onChange={(e) => setMarks({ ...marks, crossMark: Number(e.target.value) })}
                                        className="bg-gray-800 border-gray-700"
                                    />
                                </div>
                                <div>
                                    <label className="block text-sm text-gray-400 mb-1">Avg Mark</label>
                                    <Input
                                        type="number"
                                        value={marks.avgMark}
                                        onChange={(e) => setMarks({ ...marks, avgMark: Number(e.target.value) })}
                                        className="bg-gray-800 border-gray-700 font-bold"
                                    />
                                </div>
                            </div>
                        </div>

                        <div className="border border-gray-700 rounded-md p-4">
                            <h3 className="text-lg mb-3">‡¶ï‡ßã‡¶° ‡¶ï‡ßÅ‡¶Ø‡¶º‡¶æ‡¶≤‡¶ø‡¶ü‡¶ø ‡¶è‡¶¨‡¶Ç ‡¶∞‡¶ø‡¶ú‡ßá‡¶¨‡¶ø‡¶≤‡¶ø‡¶ü‡¶ø</h3>
                            <div className="flex gap-2 mb-4">
                                <Button className="rounded-full bg-green-900 hover:bg-green-800 text-white h-8 w-8 p-0">A+</Button>
                                <Button className="rounded-full bg-blue-900 hover:bg-blue-800 text-white h-8 w-8 p-0">A</Button>
                                <Button className="rounded-full bg-amber-900 hover:bg-amber-800 text-white h-8 w-8 p-0">A-</Button>
                                <Button className="rounded-full bg-red-900 hover:bg-red-800 text-white h-8 w-8 p-0">F</Button>
                            </div>
                        </div>

                        <div className="border border-gray-700 rounded-md p-4">
                            <h3 className="text-lg mb-3">Feedback</h3>
                            <textarea
                                placeholder="Your comment"
                                value={comment}
                                onChange={(e) => setComment(e.target.value)}
                                className="w-full bg-gray-800 border border-gray-700 rounded-md p-2 h-24 mb-4"
                            />

                            <Button onClick={handleSubmit} className="w-full bg-blue-600 hover:bg-blue-700" disabled={isSubmitted}>
                                <Save className="h-4 w-4 mr-2" />
                                {isSubmitted ? "Submitted" : "Submit Marks"}
                            </Button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    )
}

