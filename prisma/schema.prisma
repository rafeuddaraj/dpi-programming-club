// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserStatus {
  ACTIVE
  RESTRICTED
  BANNED
  EXPIRED
  PROCESSING
  EX
}

model User {
  id                    String                 @id @default(auto()) @map("_id") @db.ObjectId
  password              String
  registeredUserId      String                 @unique @db.ObjectId
  user                  RegisteredUser         @relation(fields: [registeredUserId], references: [id])
  avatar                String?
  skills                String[]               @default([])
  discord               String?
  bio                   String?
  about                 String?
  linkedin              String?
  github                String?
  role                  String                 @default("member") // member, moderator, admin
  address               String?
  status                UserStatus             @default(PROCESSING)
  renewalDate           DateTime
  otp                   Int?
  expiredOtp            DateTime?
  examiner              Boolean?               @default(false)
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt()
  token                 Session[]
  Payment               Payment[]
  gallery               Gallery[]
  EventParticipant      EventParticipant[]
  workshopParticipants  WorkshopParticipant[]
  eventExaminers        EventParticipant[]     @relation("Examiner")
  examiners             AssignmentSubmission[] @relation("Examiner")
  assignmentSubmissions AssignmentSubmission[]
  quizResults           QuizResults[]
  Notice                Notice[]
}

model Session {
  id           String @id @default(auto()) @map("_id") @db.ObjectId
  accessToken  String
  refreshToken String
  userId       String @unique @db.ObjectId
  user         User   @relation(fields: [userId], references: [id])
}

enum EventType {
  OFFLINE
  ONLINE
}

model Event {
  id                   String             @id @default(auto()) @map("_id") @db.ObjectId
  name                 String
  description          String
  startTime            DateTime
  endTime              DateTime
  type                 EventType          @default(OFFLINE) // Offline Or Online 
  location             String // If Online Store Meeting Link else Offline Store Location 
  curriculums          String[]
  author               String // Organizers
  authorsDetails       Json? // Organizers Details
  price                Int? // If Premium Event for need Price
  availableSeat        Int? // Event Set
  registrationDeadline DateTime?
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt()
  EventParticipant     EventParticipant[]
}

model EventParticipant {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  eventId       String   @db.ObjectId
  event         Event    @relation(fields: [eventId], references: [id])
  participantId String   @db.ObjectId
  score         Int?
  complete      Boolean  @default(false)
  certificate   String?
  feedback      String?
  participant   User     @relation(fields: [participantId], references: [id])
  joining       DateTime @default(now())
  paymentId     String?  @db.ObjectId
  payment       Payment? @relation(fields: [paymentId], references: [id])
  examinerId    String?  @db.ObjectId
  examiner      User?    @relation("Examiner", fields: [examinerId], references: [id])

  @@unique([eventId, participantId])
}

enum ActivityType {
  OFFLINE
  ONLINE
}

model Workshop {
  id                   String                @id @default(auto()) @map("_id") @db.ObjectId
  name                 String
  description          String
  outline              String[]
  registrationDeadline DateTime
  startingDate         DateTime
  endingDate           DateTime
  price                Int?
  type                 ActivityType          @default(OFFLINE)
  totalSeats           Int? // if offline mention it. otherwise not need. 
  instructor           String? // Instructor name
  instructorDetails    String? // Instructor Details
  instructorUrl        String? // Instructor Details or portfolio or Profile
  isActive             Boolean               @default(false) // status
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt()
  modules              WorkshopModule[]
  participants         WorkshopParticipant[]
}

model WorkshopModule {
  id           String           @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  description  String?
  workshopId   String           @db.ObjectId
  workshop     Workshop         @relation(fields: [workshopId], references: [id])
  lessons      WorkshopLesson[]
  isActive     Boolean          @default(false)
  position     Int              @default(0)
  startingDate DateTime
  endingDate   DateTime
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt()
}

model WorkshopLesson {
  id               String         @id @default(auto()) @map("_id") @db.ObjectId
  name             String
  description      String?
  liveLink         String? // This is Live Link for Online workshop 
  recordedLink     String? // This is Online workshop recorded link 
  location         String? // This is only use to Offline workshop
  workshopModuleId String         @db.ObjectId
  module           WorkshopModule @relation(fields: [workshopModuleId], references: [id])
  isActive         Boolean        @default(false)
  position         Int            @default(0)
  startingDate     DateTime
  endingDate       DateTime
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt()
  assignment       Assignments?
}

model WorkshopParticipant {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  workshopId    String   @db.ObjectId
  workshop      Workshop @relation(fields: [workshopId], references: [id])
  participantId String   @db.ObjectId
  participant   User     @relation(fields: [participantId], references: [id])
  price         Int?
  score         Int? // - update
  complete      Boolean  @default(false) // - update
  certificate   String? // - update
  feedback      String? // - update
  paymentId     String?  @db.ObjectId
  lastModuleId  String?  @db.ObjectId
  lastLessonId  String?  @db.ObjectId
  payment       Payment? @relation(fields: [paymentId], references: [id])
  joining       DateTime @default(now())

  @@unique([workshopId, participantId])
}

// Payments

model Payment {
  id                  String                @id @default(auto()) @map("_id") @db.ObjectId
  userId              String                @db.ObjectId
  user                User                  @relation(fields: [userId], references: [id])
  amount              Int
  paymentMethod       String
  paymentDetails      String
  accountNo           String
  registrationFee     Boolean               @default(false)
  paymentStatus       Boolean               @default(false)
  transactionId       String
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt()
  EventParticipant    EventParticipant[]
  WorkshopParticipant WorkshopParticipant[]
}

model Gallery {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  creatorId   String   @db.ObjectId
  creator     User     @relation(fields: [creatorId], references: [id])
  title       String
  description String
  images      String[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt()
}

// Assignments 

enum ASSIGNABLE_TYPES {
  WORKSHOP
}

model Assignments {
  id             String                 @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  description    String
  assignableType ASSIGNABLE_TYPES       @default(WORKSHOP)
  totalMarks     Int                    @default(100)
  submissions    AssignmentSubmission[]
  deuDate        DateTime
  createdAt      DateTime               @default(now())
  updatedAt      DateTime               @updatedAt()
  lessonId       String                 @unique @db.ObjectId // Lesson Id
  lessons        WorkshopLesson         @relation(fields: [lessonId], references: [id])
}

enum SubmissionStatus {
  PUBLISHED
  PENDING
  RECHECK
  MARKED
}

model AssignmentSubmission {
  id             String           @id @default(auto()) @map("_id") @db.ObjectId
  userId         String           @db.ObjectId
  liveLink       String           @unique
  documentLink   String           @unique
  submissionDate DateTime         @default(now())
  marks          Int? // Null if not marked yet
  status         SubmissionStatus @default(PENDING)
  feedback       String? // Feedback from the Admin/Moderator
  assignmentId   String           @db.ObjectId
  assignment     Assignments      @relation(fields: [assignmentId], references: [id])
  user           User             @relation(fields: [userId], references: [id])
  examinerId     String?          @db.ObjectId
  requirements   String[]         @default([])
  examiner       User?            @relation("Examiner", fields: [examinerId], references: [id]) // reviews
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt()

  @@unique([assignmentId, userId, documentLink, liveLink])
}

// Quizzes

model Quizzes {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String
  totalMarks  Int      @default(100)
  duration    Int // Duration in minutes
  isActive    Boolean  @default(false)
  startTime   DateTime // When the quiz will be available
  endTime     DateTime // When the quiz will end
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt()

  questions QuizQuestions[]
  results   QuizResults[]
  links     QuizLinks[]
}

model QuizQuestions {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  quizId       String   @db.ObjectId
  question     String
  options      String[] // ["Option 1", "Option 2", "Option 3", "Option 4"]
  isActive     Boolean  @default(false)
  correctIndex Int // Index of the correct answer in the options array
  marks        Int // Marks for this question
  quiz         Quizzes  @relation(fields: [quizId], references: [id])
}

model QuizResults {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  quizId      String   @db.ObjectId
  userId      String   @db.ObjectId
  score       Int
  completedAt DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt()
  quiz        Quizzes  @relation(fields: [quizId], references: [id])
  user        User     @relation(fields: [userId], references: [id])
}

model QuizLinks {
  id        String       @id @default(auto()) @map("_id") @db.ObjectId
  quizId    String       @db.ObjectId
  type      ActivityType // "Workshop", "Course", etc.
  relatedId String       @db.ObjectId // ID of the related entity (e.g., Workshop ID or Course ID)
  quiz      Quizzes      @relation(fields: [quizId], references: [id])
}

// Notice Board

model Notice {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  document  String?
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  status    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
}

// Globals Settings for ADMIN
model Settings {
  id                       String    @id @default(auto()) @map("_id") @db.ObjectId
  registrationDeadline     DateTime?
  nextRegistrationDeadline DateTime?
  feedbackStatus           Boolean   @default(false)
  createdAt                DateTime  @default(now())
  updatedAt                DateTime  @updatedAt()
}

// Entry members 

enum Gender {
  male
  female
}

model RegisteredUser {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  email          String   @unique
  rollNo         String   @unique
  registrationNo String   @unique
  phoneNumber    String   @unique
  session        String
  gender         Gender
  shift          String
  semester       String
  department     String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt()
  isManagement   Boolean? @default(false)
  user           User?
  secretCode     Int?
}

type ResultsCgps {
  /// Multiple data types found: String: 7.9%, Float: 81.9%, Int: 10.2% out of 1000 sampled entries
  gpa1 Json?
  /// Multiple data types found: String: 18.1%, Float: 76.2%, Int: 5.8% out of 1000 sampled entries
  gpa2 Json?
  /// Multiple data types found: String: 17.6%, Float: 80.4%, Int: 2% out of 1000 sampled entries
  gpa3 Json?
  /// Multiple data types found: String: 28.2%, Float: 70.4%, Int: 1.4% out of 1000 sampled entries
  gpa4 Json?
  /// Multiple data types found: String: 29.2%, Float: 69.9%, Int: 0.9% out of 1000 sampled entries
  gpa5 Json?
  /// Multiple data types found: String: 50.4%, Float: 49.3%, Int: 0.3% out of 1000 sampled entries
  gpa6 Json?
  /// Multiple data types found: String: 52.8%, Float: 46.4%, Int: 0.9% out of 1000 sampled entries
  gpa7 Json?
  /// Multiple data types found: String: 4.7%, Float: 24.2%, Int: 71.1% out of 1000 sampled entries
  gpa8 Json?
}

model Results {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  cgps       ResultsCgps
  exam       String
  institute  String
  ref_sub    String[]
  regulation String
  roll       String
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt()

  @@index([roll], map: "roll_1")
}
