// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                  String                @id @default(auto()) @map("_id") @db.ObjectId
  name                String
  email               String                @unique
  password            String
  phoneNumber         String                @unique
  gender              String
  avatar              String?
  semester            String
  coverImage          String?
  session             String
  department          String
  rollNo              String
  skills              String[]              @default([])
  registrationNo      String
  discord             String?
  bio                 String?
  about               String?
  linkedin            String?
  github              String?
  shift               String
  role                String                @default("member") // member, moderator, admin
  address             String?
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt()
  token               Session[]
  Payment             Payment[]
  Gallery             Gallery[]
  EventParticipant    EventParticipant[]
  WorkshopParticipant WorkshopParticipant[]
  CourseEnrollment    CourseEnrollment[]
}

model Session {
  id           String @id @default(auto()) @map("_id") @db.ObjectId
  accessToken  String
  refreshToken String
  userId       String @unique @db.ObjectId
  user         User   @relation(fields: [userId], references: [id])
}

model Event {
  id               String             @id @default(auto()) @map("_id") @db.ObjectId
  name             String
  description      String
  startTime        DateTime
  endTime          DateTime
  badge            String?
  duration         DateTime
  type             String // Offline Or Online 
  location         String // If Online Store Meeting Link else Offline Store Location 
  curriculums      String[]
  author           String // Organizers
  authorsDetails   String[] // Organizers Details
  price            Int? // If Premium Event for need Price
  availableSeat    Int? // Event Set
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt()
  EventParticipant EventParticipant[]
}

model EventParticipant {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  eventId       String   @db.ObjectId
  event         Event    @relation(fields: [eventId], references: [id])
  participantId String   @db.ObjectId
  price         Int?
  score         Int?
  complete      Boolean  @default(false)
  certificate   String?
  feedback      String?
  participant   User     @relation(fields: [participantId], references: [id])
  joining       DateTime @default(now())
}

model Workshop {
  id                  String                @id @default(auto()) @map("_id") @db.ObjectId
  name                String
  description         String
  startTime           DateTime
  endTime             DateTime
  badge               String?
  duration            DateTime
  type                String // Offline Or Online 
  location            String // If Online Store Meeting Link else Offline Store Location 
  curriculums         String[]
  author              String // Organizers
  authorsDetails      String[] // Authors Details
  price               Int? // If Premium Event for need Price
  availableSeat       Int? // Event Set
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt()
  WorkshopParticipant WorkshopParticipant[]
}

model WorkshopParticipant {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  workshopId    String   @db.ObjectId
  workshop      Workshop @relation(fields: [workshopId], references: [id])
  participantId String   @db.ObjectId
  participant   User     @relation(fields: [participantId], references: [id])
  price         Int?
  score         Int?
  complete      Boolean  @default(false)
  certificate   String?
  feedback      String?
  joining       DateTime @default(now())
}

model Course {
  id               String             @id @default(auto()) @map("_id") @db.ObjectId
  name             String
  description      String
  startTime        DateTime
  endTime          DateTime
  type             String // Offline Or Online 
  level            String // Beginner/ Advance
  duration         DateTime
  curriculums      String[] // Array of Object
  author           String // Organizers
  authorsDetails   String[] // Authors Details
  price            Int? // If Premium Event for need Price
  availableSeat    Int? // Event Set
  badge            String?
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt()
  CourseEnrollment CourseEnrollment[]
}

model CourseEnrollment {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  courseId      String   @db.ObjectId
  course        Course   @relation(fields: [courseId], references: [id])
  participantId String   @db.ObjectId
  price         Int?
  score         Int?
  complete      Boolean  @default(false)
  certificate   String?
  feedback      String?
  participant   User     @relation(fields: [participantId], references: [id])
  joining       DateTime @default(now())
}

// Payments

model Payment {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  userId          String   @db.ObjectId
  user            User     @relation(fields: [userId], references: [id])
  amount          Int
  paymentMethod   String
  paymentDetails  String
  accountNo       String
  registrationFee Boolean  @default(false)
  paymentStatus   Boolean  @default(false)
  transactionId   String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt()
}

model Gallery {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  creatorId   String   @db.ObjectId
  creator     User     @relation(fields: [creatorId], references: [id])
  title       String
  description String
  images      String[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt()
}
